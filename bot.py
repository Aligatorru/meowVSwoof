from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
)
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, CallbackContext
)
from flask import Flask
from threading import Thread
import os

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://aligatorru.github.io/meowVSwoof/")

# –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç (–¥–ª—è Render)
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üê±üê∂"

def run_flask():
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π Render —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å
    app.run(host='0.0.0.0', port=10000)

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    user = update.effective_user

    keyboard = [
        [InlineKeyboardButton("üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
        [InlineKeyboardButton("üß© –†–µ–∂–∏–º—ã", callback_data="modes")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üê±üê∂\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –ö–æ—à–µ—á–∫–∏-—Å–æ–±–∞—á–∫–∏.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == "rules":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        query.edit_message_text(
            text="üìú *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:*\n"
                 "–≠—Ç–æ —à—É—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤ üß†\n"
                 "–í—ã–±–∏—Ä–∞–µ—à—å —Å—Ç–æ—Ä–æ–Ω—É ‚Äî –∏ —Å–º–æ—Ç—Ä–∏—à—å, –∫–∞–∫ –≤—Å—ë –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è üêæüòâ",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "modes":
        keyboard = [
            [InlineKeyboardButton("üê± –ö–æ—à–µ—á–∫–∏-–°–æ–±–∞—á–∫–∏", web_app=WebAppInfo(url=f"{WEBAPP_URL}?mode=neutral"))],
            # [InlineKeyboardButton("üë¶ –ú–∞–ª—å—á–∏–∫–∏-–î–µ–≤–æ—á–∫–∏", web_app=WebAppInfo(url=f"{WEBAPP_URL}?mode=boy"))],
            # [InlineKeyboardButton("üëß –î–µ–≤–æ—á–∫–∏-–ú–∞–ª—å—á–∏–∫–∏", web_app=WebAppInfo(url=f"{WEBAPP_URL}?mode=girl"))],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        query.edit_message_text(
            text="üß© –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –∏–≥—Ä—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        user = query.from_user
        keyboard = [
            [InlineKeyboardButton("üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
            [InlineKeyboardButton("üß© –†–µ–∂–∏–º—ã", callback_data="modes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            text=f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üê±üê∂\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –ö–æ—à–µ—á–∫–∏-—Å–æ–±–∞—á–∫–∏.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask).start()

    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()